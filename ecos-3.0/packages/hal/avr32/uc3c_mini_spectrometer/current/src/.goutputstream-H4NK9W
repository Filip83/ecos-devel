/*
 * MGS1_board_startup.c
 *
 * Created: 15.5.2013 10:27:12
 *  Author: Filip
 */ 


#include <pkgconf/system.h>
#include <pkgconf/hal_avr32_uc3c.h>

#include <cyg/infra/cyg_type.h>
#include <cyg/infra/testcase.h>           // Test macros
#include <cyg/infra/cyg_ass.h>            // Assertion macros
#include <cyg/infra/diag.h>               // Diagnostic output

#include <cyg/hal/hal_arch.h>             // CYGNUM_HAL_STACK_SIZE_TYPICAL
#include <cyg/hal/hal_if.h>
//#include <cyg/kernel/kapi.h>

#include <cyg/io/spi.h>
#include <cyg/io/spi_avr32.h>
#include <cyg/io/flash.h>


#include <cyg/io/fm25wxx.h>
#include <cyg/io/n25qxx.h>
#include <cyg/hal/avr32/io.h>
#include <cyg/hal/gpio.h>
#include "MGS1_board_config.h"

//! Unlock PM register macro
#define PM_UNLOCK(reg)  (AVR32_PM.unlock = (AVR32_PM_UNLOCK_KEY_VALUE << AVR32_PM_UNLOCK_KEY_OFFSET) | (reg))

cyg_uint64	_hw_error = 0;

/**
/* Definition of SPI device on chip select 0
/* for NX25QXX FLASH chip.
*/
cyg_spi_avr32_device_t flash_spi_device =
{
	.spi_device     = &cyg_spi_avr32_bus1,
	.dev_num        = FLASH_N25QXX_SPI_DEV_CS_NUM,
	.bits           = FLASH_N25QXX_SPI_DEV_BITS_NUM,
	.cl_pol         = FLASH_N25QXX_SPI_DEV_CPOL,
	.cl_pha         = FLASH_N25QXX_SPI_DEV_NCPHA,
	.cl_brate       = FLASH_N25QXX_SPI_DEV_BUD_RATE,
	.cs_up_udly     = FLASH_N25QXX_SPI_DEV_CSUP_DLY,
	.tr_bt_udly     = FLASH_N25QXX_SPI_DEV_BYTE_DLY
};

/**
/* Definition of SPI device on chip select 2
/* for FM25WXX FRAM chip.
*/
cyg_spi_avr32_device_t fram_spi_device =
{
	.spi_device     = &cyg_spi_avr32_bus1,
	.dev_num        = FRAM_FM25WXX_SPI_DEV_CS_NUM,
	.bits           = FRAM_FM25WXX_SPI_DEV_BITS_NUM,
	.cl_pol         = FRAM_FM25WXX_SPI_DEV_CPOL,
	.cl_pha         = FRAM_FM25WXX_SPI_DEV_NCPHA,
	.cl_brate       = FRAM_FM25WXX_SPI_DEV_BUD_RATE,
	.cs_up_udly     = FRAM_FM25WXX_SPI_DEV_CSUP_DLY,
	.tr_bt_udly     = FRAM_FM25WXX_SPI_DEV_BYTE_DLY
};

/**
* Definition of FLASH drivers structure for FLASH and FRAM
*/
CYG_DEVS_FLASH_SPI_FM25WXX_DRIVER(fm25wxx_spi_fram,FRAM_FM25WXX_BASE_ADDRESS,&fram_spi_device);
CYG_DEVS_FLASH_SPI_N25QXX_DRIVER(n25qxx_spi_flash,FLASH_N25QXX_BASE_ADDRESS,&flash_spi_device);

#ifdef BOOT_LOADER
#include <cyg/io/dataflash.h>

cyg_spi_avr32_device_t data_flash_spi_device =
{
	.spi_device     = &cyg_spi_avr32_bus0,
	.dev_num        = FLASH_AT45DBXX_SPI_DEV_CS_NUM,
	.bits           = FLASH_AT45DBXX_SPI_DEV_BITS_NUM,
	.cl_pol         = FLASH_AT45DBXX_SPI_DEV_CPOL,
	.cl_pha         = FLASH_AT45DBXX_SPI_DEV_NCPHA,
	.cl_brate       = FLASH_AT45DBXX_SPI_DEV_BUD_RATE,
	.cs_up_udly     = FLASH_AT45DBXX_SPI_DEV_CSUP_DLY,
	.tr_bt_udly     = FLASH_AT45DBXX_SPI_DEV_BYTE_DLY
};



CYG_DATAFLASH_FLASH_DRIVER(at45dbxx_spi_flash, &data_flash_spi_device, 
		FLASH_AT45DBXX_BASE_ADDRESS, 0, 15);

#endif

void hal_board_init()
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[1];
	int i;
	/*for(i = 0; i < 20000; i++)
	{
		__asm ("NOP");
	}*/
	//zpnut pull-up pro 32k z rtc open-drain
	//gpio_enable_pin_pull_up(AVR32_PIN_PB00);
	//gpio_port->puers = -1;
	//Na vývodu je externí pull down
	//a pull-up je zpanuty p